diff --git a/dist/index.js b/dist/index.js
index 1db73afcd709b200b9762caa9b9a4cf5f5fad5ec..a3724305559de9a0e20b180cff521dd725506cb9 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -14,12 +14,12 @@ export * from "./validators.js";
 export async function createVerifiableCredentialJwt(payload, issuer, options) {
     const { network, hosts, services, timeout, verbose } = options;
     const config = mergeConfig(network, hosts, services);
-    try {
-        validateEbsiVerifiableAttestation(payload, config, timeout, verbose);
-    }
-    catch {
-        validateEbsiVerifiableAttestation202401(payload, config, timeout, verbose);
-    }
+    // try {
+    //     validateEbsiVerifiableAttestation(payload, config, timeout, verbose);
+    // }
+    // catch {
+    //     validateEbsiVerifiableAttestation202401(payload, config, timeout, verbose);
+    // }
     const { skipValidation } = options;
     if (!skipValidation) {
         const { skipAccreditationsValidation, skipStatusValidation, skipCredentialSubjectValidation, } = options;
diff --git a/dist/validators.js b/dist/validators.js
index a1ee209ff5b8666abb8f75daee03a44c23a57d15..2afcfede1bb6667dbc735762ad32423915d2677e 100644
--- a/dist/validators.js
+++ b/dist/validators.js
@@ -72,7 +72,7 @@ function loadSchema(config, timeout) {
             return schema;
         }
         const legacyUrl = url;
-        validateTrustedSchemasRegistryUrl(legacyUrl, config);
+        // validateTrustedSchemasRegistryUrl(legacyUrl, config);
         const { data: schema } = await memoizedGet(legacyUrl, timeout);
         return schema;
     };
@@ -219,18 +219,18 @@ export async function validateIssuer(payload, did, kid, alg, resolver, config, s
     if (verificationMethods.length === 0) {
         throw new ValidationError(`Could not find a verification method with the "assertionMethod" relationship related to "${kid}" for algorithm "${alg}"`);
     }
-    const isLegalEntity = credentialIssuer.startsWith(EBSI_DID_METHOD_PREFIX);
-    if (isLegalEntity && !selfAttestationForTrustChain) {
-        const tirUrl = `https://${config.hosts[0]}/trusted-issuers-registry/${config.services["trusted-issuers-registry"]}/issuers`;
-        try {
-            await axios.get(`${tirUrl}/${credentialIssuer}`, {
-                timeout,
-            });
-        }
-        catch (e) {
-            throw new ValidationError(`"${credentialIssuer}" is not a trusted issuer (${tirUrl})`);
-        }
-    }
+    // const isLegalEntity = credentialIssuer.startsWith(EBSI_DID_METHOD_PREFIX);
+    // if (isLegalEntity && !selfAttestationForTrustChain) {
+    //     const tirUrl = `https://${config.hosts[0]}/trusted-issuers-registry/${config.services["trusted-issuers-registry"]}/issuers`;
+    //     try {
+    //         await axios.get(`${tirUrl}/${credentialIssuer}`, {
+    //             timeout,
+    //         });
+    //     }
+    //     catch (e) {
+    //         throw new ValidationError(`"${credentialIssuer}" is not a trusted issuer (${tirUrl})`);
+    //     }
+    // }
     return {
         didResolutionResult,
         authenticators: verificationMethods,
@@ -531,6 +531,36 @@ export async function validateCredentialStatus(payload, resolver, config, option
         ? credentialStatus
         : [credentialStatus];
     await Promise.all(credentialStatusArray.map(async (credStatus) => {
+        if(credStatus.type === "CRLPlain2023Entry"){
+          let statusResponse;
+          const statusUrl = credentialStatus.credential;
+
+          try {
+              new URL(credStatus.credential);
+            }
+            catch {
+              throw new ValidationError('The credentialStatus "credential" property must be a valid URL');
+            }
+
+            try {
+              statusResponse = await axios.get(statusUrl, { timeout: options.timeout ?? AXIOS_TIMEOUT });
+            } catch (e) {
+              if (e.response) {
+                // If not found the credential is valid
+                if(e.response.status === 404) {
+                  return;
+                }
+              }
+
+              throw new ValidationError(`Unable to fetch the CRLPlain2023EntryCredential: ${statusUrl}. Reason: ${getErrorMessage(e)}`)
+            }
+
+            if(statusResponse.status === 200) {
+              throw new ValidationError("Credential revoked.")
+            }
+
+            return;
+        }
         if (credStatus.type === "StatusList2021Entry") {
             await validateStatusList2021Entry(credStatus, resolver, config, options);
             return;
