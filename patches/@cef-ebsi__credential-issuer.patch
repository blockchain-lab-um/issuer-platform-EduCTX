diff --git a/dist/validatePostCredential.js b/dist/validatePostCredential.js
index 7bd27ed4cec6a15915db6a109cbe445b46a0595b..7bbb622788982a0c292e9c3847a4d67c8e526091 100644
--- a/dist/validatePostCredential.js
+++ b/dist/validatePostCredential.js
@@ -140,11 +140,11 @@ export async function validatePostCredential(db, serverDid, serverUrl, authPubli
             errorDescription: `Invalid Proof JWT: aud doesn't match the expected audience ${serverUrl}`,
         });
     }
-    if (proofPayload.iss !== accessTokenPayload.claims.client_id) {
-        throw new CredentialError("invalid_or_missing_proof", {
-            errorDescription: "Invalid Proof JWT: iss doesn't match the expected client_id",
-        });
-    }
+    // if (proofPayload.iss !== accessTokenPayload.claims.client_id) {
+    //     throw new CredentialError("invalid_or_missing_proof", {
+    //         errorDescription: "Invalid Proof JWT: iss doesn't match the expected client_id",
+    //     });
+    // }
     if (requestBody.types.includes("VerifiableAuthorisationToOnboard")) {
     }
     else {
@@ -167,11 +167,11 @@ export async function validatePostCredential(db, serverDid, serverUrl, authPubli
             });
         }
         const proofHeaderParams = parsedProofHeaderParams.data;
-        if (!proofHeaderParams.kid.startsWith(accessTokenPayload.sub)) {
-            throw new CredentialError("invalid_or_missing_proof", {
-                errorDescription: "Invalid Proof JWT header: kid must correspond to the DID used during the authentication",
-            });
-        }
+        // if (!proofHeaderParams.kid.startsWith(accessTokenPayload.sub)) {
+        //     throw new CredentialError("invalid_or_missing_proof", {
+        //         errorDescription: "Invalid Proof JWT header: kid must correspond to the DID used during the authentication",
+        //     });
+        // }
         const { kid } = proofHeaderParams;
         const did = kid.split("#")[0];
         const resolver = did.startsWith("did:ebsi:") ? ebsiResolver : keyResolver;
diff --git a/dist/validators/access-token.validator.js b/dist/validators/access-token.validator.js
index d4f82f0f3b192ce0ea4541df15f6e0a8964b3b4e..e61c9818d46cc4e2cba730f21347534455b0380e 100644
--- a/dist/validators/access-token.validator.js
+++ b/dist/validators/access-token.validator.js
@@ -3,7 +3,7 @@ import { authorizationDetailsSchema } from "./authorization-details.validator.js
 export const accessTokenPayloadSchema = (credentialTypesSupported) => z.object({
     iss: z.string().url(),
     aud: z.union([z.array(z.string().url()), z.string().url()]),
-    sub: z.string(),
+    // sub: z.string(),
     iat: z.number(),
     exp: z.number(),
     nonce: z.string(),
@@ -11,7 +11,7 @@ export const accessTokenPayloadSchema = (credentialTypesSupported) => z.object({
         authorization_details: authorizationDetailsSchema(credentialTypesSupported),
         c_nonce: z.string(),
         c_nonce_expires_in: z.number(),
-        client_id: z.string().url(),
+        // client_id: z.string().url(),
     }),
 });
 export const accessTokenHeaderSchema = z.object({
diff --git a/dist/validators/authorization-details.validator.js b/dist/validators/authorization-details.validator.js
index 5ffdb4f1712087c234a7d615fac96408fab69a16..7c09ceb20a500d33fc13f15822e8de24b9853658 100644
--- a/dist/validators/authorization-details.validator.js
+++ b/dist/validators/authorization-details.validator.js
@@ -2,9 +2,9 @@ import { z } from "zod";
 export const authorizationDetailsSchema = (credentialTypesSupported) => z
     .array(z.object({
     type: z.literal("openid_credential"),
-    format: z.union([z.literal("jwt_vc"), z.literal("jwt_vc_json")], {
+    format: z.union([z.literal("jwt_vc"), z.literal("jwt_vc_json"), z.literal("vc+sd-jwt")], {
         errorMap: () => ({
-            message: 'Invalid literal value, expected "jwt_vc" or "jwt_vc_json"',
+            message: 'Invalid literal value, expected "jwt_vc", "jwt_vc_json" or "vc+sd-jwt"',
         }),
     }),
     locations: z.array(z.string().url()).nonempty().optional(),
diff --git a/dist/validators/credential-request.validator.js b/dist/validators/credential-request.validator.js
index fcc837f1b4470d6e11aa553ac9c41d38b08db26a..2f2b281406f3d2a23ef0649f37d82e6ba6b1f809 100644
--- a/dist/validators/credential-request.validator.js
+++ b/dist/validators/credential-request.validator.js
@@ -1,8 +1,8 @@
 import { z } from "zod";
 export const credentialRequestSchema = (credentialTypesSupported) => z.object({
-    format: z.union([z.literal("jwt_vc"), z.literal("jwt_vc_json")], {
+    format: z.union([z.literal("jwt_vc"), z.literal("jwt_vc_json"), z.literal("vc+sd-jwt")], {
         errorMap: () => ({
-            message: 'Invalid literal value, expected "jwt_vc" or "jwt_vc_json"',
+            message: 'Invalid literal value, expected "jwt_vc", "jwt_vc_json" or "vc+sd-jwt"',
         }),
     }),
     types: z
