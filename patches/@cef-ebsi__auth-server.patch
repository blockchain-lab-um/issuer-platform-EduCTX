diff --git a/dist/dto/get-authorize-generic.dto.js b/dist/dto/get-authorize-generic.dto.js
index 9630ce78a15435a3eeec20e14da7c021629e5910..01331305b5797ec9c0f69c85c8fd3cb341a5c2a5 100644
--- a/dist/dto/get-authorize-generic.dto.js
+++ b/dist/dto/get-authorize-generic.dto.js
@@ -17,7 +17,7 @@ export class GetAuthorizeGenericDto extends GetAuthorizeDto {
     }
 }
 __decorate([
-    IsIn(["openid", "openid ver_test:id_token", "openid ver_test:vp_token"]),
+   IsString(), // Note: This was chaged, as we will add more scopes than were supported in the library.
     __metadata("design:type", String)
 ], GetAuthorizeGenericDto.prototype, "scope", void 0);
 __decorate([
@@ -25,7 +25,8 @@ __decorate([
     __metadata("design:type", String)
 ], GetAuthorizeGenericDto.prototype, "response_type", void 0);
 __decorate([
-    IsDidOrUrl(),
+    IsOptional(), // Note: We make this optional
+    IsString(), // Note: Set to String to make it easier to change the code
     __metadata("design:type", String)
 ], GetAuthorizeGenericDto.prototype, "client_id", void 0);
 __decorate([
diff --git a/dist/utils.js b/dist/utils.js
index a705aaff3a43eec239630358032631961a60ff38..d9d8911c4cca48b91d8362b186814a55211064fb 100644
--- a/dist/utils.js
+++ b/dist/utils.js
@@ -524,20 +524,21 @@ export async function authorizeHolderWallet(db, addKeyToCacheManager, serverDid,
             }
         }
     }
-    if (query.client_id.startsWith("did:key:") &&
+    if (query.client_id &&
+        query.client_id.startsWith("did:key:") &&
         (!query.code_challenge || !query.code_challenge_method) &&
         query.scope === "openid") {
         return invalidRequest("code_challenge_method and code_challenge are required for this request");
     }
-    const state = randomUUID();
+    const state = query.state ?? randomUUID(); // Note: We want to define our own state
     const nonce = randomUUID();
     const storedValue = {
         requestPayload: {
             redirect_uri: query.redirect_uri,
             state: query.state,
             authorization_details: authorizationDetails,
-            client_id: query.client_id,
             scope: query.scope,
+            ...(query.client_id ? {client_id: query.client_id}: {})
         },
         nonce,
         codeChallenge: query.code_challenge,
@@ -566,9 +567,9 @@ export async function authorizeHolderWallet(db, addKeyToCacheManager, serverDid,
             ...vpTokenRequest,
             presentation_definition: presentationDefinition,
             iss: serverUrl,
-            aud: query.client_id,
             iat: now,
             exp: now + 3600,
+            ...(query.client_id ? {aud: query.client_id}: {})
         }, {
             issuer: serverUrl,
             signer: getSigner(privateKey, "ES256"),
@@ -592,7 +593,7 @@ export async function authorizeHolderWallet(db, addKeyToCacheManager, serverDid,
         scope: "openid",
         nonce,
     };
-    const requestJwt = await createJWT({ ...idTokenRequest, iss: serverUrl, aud: query.client_id }, {
+    const requestJwt = await createJWT({ ...idTokenRequest, iss: serverUrl, ...(query.client_id ? {aud: query.client_id}: {})}, {
         issuer: serverUrl,
         signer: getSigner(privateKey, "ES256"),
     }, {
@@ -647,7 +648,10 @@ export async function authorize(db, addKeyToCacheManager, serverDid, serverUrl,
     }
     if ("client_id" in query &&
         typeof query.client_id === "string" &&
-        query.client_id.startsWith("did:key:")) {
+       (query.client_id.startsWith("did:key:") || query.client_id === "eductx-platform-backend")) {
+        if (query.client_id === "eductx-platform-backend"){
+          query.clientId = undefined;
+        }
         return authorizeHolderWallet(db, addKeyToCacheManager, serverDid, serverUrl, serverKid, privateKey, query, issuerMockPublicKeyJwk, presentationDefinitionSelector, credentialTypesSupported, holderWalletCredentialTypes, expectedIssuerState, queryState);
     }
     return authorizeServiceWallet(db, addKeyToCacheManager, serverDid, serverUrl, serverKid, privateKey, query, presentationDefinitionSelector, validScopes, credentialTypesSupported, queryState);
