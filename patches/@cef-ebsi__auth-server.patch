diff --git a/dist/AuthServer.d.ts b/dist/AuthServer.d.ts
index 13272b41fff8d6ec6ebb4c592d70d45fcd7e7da4..b6e67e1aefc5b61e14eef76ecc71313d3996af92 100644
--- a/dist/AuthServer.d.ts
+++ b/dist/AuthServer.d.ts
@@ -43,6 +43,6 @@ export declare class AuthServer {
     authorize(query: GetAuthorizeDto): Promise<string>;
     getRequestById(requestId: string): Promise<string>;
     directPost(query: unknown, validAt?: number): Promise<string>;
-    token(query: unknown): Promise<TokenResponse>;
+    token(query: unknown, options: any): Promise<TokenResponse>;
 }
 //# sourceMappingURL=AuthServer.d.ts.map
\ No newline at end of file
diff --git a/dist/AuthServer.js b/dist/AuthServer.js
index 92c3c5e9da30648d1507d22332b7954fda1cabdd..8340137ca0141b4f9067a666dd7659d0b1577327 100644
--- a/dist/AuthServer.js
+++ b/dist/AuthServer.js
@@ -86,12 +86,12 @@ export class AuthServer {
             validAt: validAt ?? Math.floor(Date.now() / 1000) + 60,
         }, this.ebsiResolver, this.keyResolver, this.timeout, query, this.presentationDefinitionSelector);
     }
-    async token(query) {
+    async token(query, options) {
         if (!this.privateKey) {
             this.privateKey = await this.getPrivateKey();
         }
         const { kid } = this.privateKeyJwk;
-        return token(this.db, this.did, this.url, kid, this.privateKey, query, this.credentialTypesSupported, this.timeout);
+        return token(this.db, this.did, this.url, kid, this.privateKey, query, this.credentialTypesSupported, this.timeout, options);
     }
 }
 //# sourceMappingURL=AuthServer.js.map
\ No newline at end of file
diff --git a/dist/dto/get-authorize-generic.dto.js b/dist/dto/get-authorize-generic.dto.js
index 9630ce78a15435a3eeec20e14da7c021629e5910..447011010795cef8c4e3d1bee138db1c10b166b0 100644
--- a/dist/dto/get-authorize-generic.dto.js
+++ b/dist/dto/get-authorize-generic.dto.js
@@ -17,7 +17,7 @@ export class GetAuthorizeGenericDto extends GetAuthorizeDto {
     }
 }
 __decorate([
-    IsIn(["openid", "openid ver_test:id_token", "openid ver_test:vp_token"]),
+   IsString(), // Note: This was chaged, as we will add more scopes than were supported in the library.
     __metadata("design:type", String)
 ], GetAuthorizeGenericDto.prototype, "scope", void 0);
 __decorate([
@@ -25,7 +25,8 @@ __decorate([
     __metadata("design:type", String)
 ], GetAuthorizeGenericDto.prototype, "response_type", void 0);
 __decorate([
-    IsDidOrUrl(),
+    IsOptional(), // Note: We make this optional
+    IsString(), // Note: Set to String to make it easier to change the code
     __metadata("design:type", String)
 ], GetAuthorizeGenericDto.prototype, "client_id", void 0);
 __decorate([
diff --git a/dist/utils.js b/dist/utils.js
index a705aaff3a43eec239630358032631961a60ff38..7ef37bdd0dcaf39540f26510ee87b3e09b547937 100644
--- a/dist/utils.js
+++ b/dist/utils.js
@@ -362,6 +362,18 @@ export async function authorizeServiceWallet(db, addKeyToCacheManager, serverDid
             ...vpTokenRequest,
             request: requestJwt,
         }).toString()}`;
+        
+        if (query.request_object === "reference" || location.length > 500) {
+          const requestNonce = randomUUID();
+          const dbKey2 = { did: serverDid, requestNonce };
+          await db.put(dbKey2, { requestJwt });
+          addKeyToCacheManager(dbKey2);
+          return `${sanitizedAuthorizationEndpoint}?${new URLSearchParams({
+              ...vpTokenRequest,
+              request_uri: `${serverUrl}/request_uri/${requestNonce}`,
+          }).toString()}`;
+        }
+
         return location;
     }
     const idTokenRequest = {
@@ -524,20 +536,20 @@ export async function authorizeHolderWallet(db, addKeyToCacheManager, serverDid,
             }
         }
     }
-    if (query.client_id.startsWith("did:key:") &&
+    if (query.client_id && query.client_id.startsWith("did:key:") &&
         (!query.code_challenge || !query.code_challenge_method) &&
         query.scope === "openid") {
         return invalidRequest("code_challenge_method and code_challenge are required for this request");
     }
-    const state = randomUUID();
+    const state = query.state ?? randomUUID(); // Note: We want to define our own state
     const nonce = randomUUID();
     const storedValue = {
         requestPayload: {
             redirect_uri: query.redirect_uri,
             state: query.state,
             authorization_details: authorizationDetails,
-            client_id: query.client_id,
             scope: query.scope,
+            ...(query.client_id ? {client_id: query.client_id}: {})
         },
         nonce,
         codeChallenge: query.code_challenge,
@@ -566,9 +578,9 @@ export async function authorizeHolderWallet(db, addKeyToCacheManager, serverDid,
             ...vpTokenRequest,
             presentation_definition: presentationDefinition,
             iss: serverUrl,
-            aud: query.client_id,
             iat: now,
             exp: now + 3600,
+            ...(query.client_id ? {aud: query.client_id}: {})
         }, {
             issuer: serverUrl,
             signer: getSigner(privateKey, "ES256"),
@@ -581,6 +593,18 @@ export async function authorizeHolderWallet(db, addKeyToCacheManager, serverDid,
             ...vpTokenRequest,
             request: requestJwt,
         }).toString()}`;
+
+        if (query.request_object === "reference" || location.length > 500) {
+          const requestNonce = randomUUID();
+          const dbKey2 = { did: serverDid, requestNonce };
+          await db.put(dbKey2, { requestJwt });
+          addKeyToCacheManager(dbKey2);
+          return `${sanitizedAuthorizationEndpoint}?${new URLSearchParams({
+              ...vpTokenRequest,
+              request_uri: `${serverUrl}/request_uri/${requestNonce}`,
+          }).toString()}`;
+        }
+        
         return location;
     }
     const idTokenRequest = {
@@ -592,7 +616,7 @@ export async function authorizeHolderWallet(db, addKeyToCacheManager, serverDid,
         scope: "openid",
         nonce,
     };
-    const requestJwt = await createJWT({ ...idTokenRequest, iss: serverUrl, aud: query.client_id }, {
+    const requestJwt = await createJWT({ ...idTokenRequest, iss: serverUrl, ...(query.client_id ? {aud: query.client_id}: {})}, {
         issuer: serverUrl,
         signer: getSigner(privateKey, "ES256"),
     }, {
@@ -647,7 +671,10 @@ export async function authorize(db, addKeyToCacheManager, serverDid, serverUrl,
     }
     if ("client_id" in query &&
         typeof query.client_id === "string" &&
-        query.client_id.startsWith("did:key:")) {
+        (query.client_id.startsWith("did:key:") || query.client_id === "eductx-platform-backend")) {
+        if (query.client_id === "eductx-platform-backend"){
+          query.clientId = undefined;
+        }
         return authorizeHolderWallet(db, addKeyToCacheManager, serverDid, serverUrl, serverKid, privateKey, query, issuerMockPublicKeyJwk, presentationDefinitionSelector, credentialTypesSupported, holderWalletCredentialTypes, expectedIssuerState, queryState);
     }
     return authorizeServiceWallet(db, addKeyToCacheManager, serverDid, serverUrl, serverKid, privateKey, query, presentationDefinitionSelector, validScopes, credentialTypesSupported, queryState);
@@ -1170,7 +1197,7 @@ async function authorizationCodeToken(db, serverDid, serverUrl, serverKid, priva
         c_nonce_expires_in: C_NONCE_EXP,
     };
 }
-async function preAuthorizedCodeToken(serverUrl, serverKid, privateKey, unsafeQuery, credentialTypesSupported, timeout) {
+async function preAuthorizedCodeToken(serverUrl, serverKid, privateKey, unsafeQuery, credentialTypesSupported, timeout, options) {
     const parsedQuery = parseDto(unsafeQuery, PostTokenPreAuthorizedCodeDto);
     if (!parsedQuery.success) {
         throw new OAuth2TokenError("invalid_request", {
@@ -1180,11 +1207,11 @@ async function preAuthorizedCodeToken(serverUrl, serverKid, privateKey, unsafeQu
     const query = parsedQuery.data;
     const { "pre-authorized_code": preAuthorizedCode, user_pin: userPin } = query;
     const preAuthorizedCodePayload = decodeJwt(preAuthorizedCode);
-    if (typeof preAuthorizedCodePayload["client_id"] !== "string") {
-        throw new OAuth2TokenError("invalid_request", {
-            errorDescription: "invalid pre-authorised code: client_id is missing",
-        });
-    }
+    // if (typeof preAuthorizedCodePayload["client_id"] !== "string") {
+    //     throw new OAuth2TokenError("invalid_request", {
+    //         errorDescription: "invalid pre-authorised code: client_id is missing",
+    //     });
+    // }
     if (typeof preAuthorizedCodePayload.iss !== "string") {
         throw new OAuth2TokenError("invalid_request", {
             errorDescription: "invalid pre-authorised code: iss is missing",
@@ -1236,8 +1263,8 @@ async function preAuthorizedCodeToken(serverUrl, serverKid, privateKey, unsafeQu
             errorDescription: `error while verifying the signature of pre-authorized_code: ${e instanceof Error ? e.message : "invalid signature"}`,
         });
     }
-    const clientId = preAuthorizedCodePayload["client_id"];
-    if (userPin !== getUserPin(clientId)) {
+    // const clientId = preAuthorizedCodePayload["client_id"];
+     if(!options.pin || options.pin !== userPin) {
         throw new OAuth2TokenError("invalid_request", {
             errorDescription: "Invalid PIN",
         });
@@ -1251,10 +1278,10 @@ async function preAuthorizedCodeToken(serverUrl, serverKid, privateKey, unsafeQu
             authorization_details: authorizationDetails,
             c_nonce: cNonce,
             c_nonce_expires_in: C_NONCE_EXP,
-            client_id: clientId,
+            // client_id: clientId,
         },
         iss: serverUrl,
-        sub: clientId,
+        // sub: clientId,
         aud: authorizationDetails[0].locations ?? serverUrl,
         iat: now,
         exp: now + ACCESS_TOKEN_EXP,
@@ -1269,8 +1296,8 @@ async function preAuthorizedCodeToken(serverUrl, serverKid, privateKey, unsafeQu
     const idToken = await createJWT({
         nonce: randomUUID(),
         iss: serverUrl,
-        sub: clientId,
-        aud: clientId,
+        // sub: clientId,
+        // aud: clientId,
         iat: now,
         exp: now + ID_TOKEN_EXP,
     }, {
@@ -1290,7 +1317,7 @@ async function preAuthorizedCodeToken(serverUrl, serverKid, privateKey, unsafeQu
         c_nonce_expires_in: C_NONCE_EXP,
     };
 }
-export async function token(db, serverDid, serverUrl, serverKid, privateKey, unsafeQuery, credentialTypesSupported, timeout) {
+export async function token(db, serverDid, serverUrl, serverKid, privateKey, unsafeQuery, credentialTypesSupported, timeout, options) {
     const parsedQuery = parseDto(unsafeQuery, PostTokenDto);
     if (!parsedQuery.success) {
         throw new OAuth2TokenError("invalid_request", {
@@ -1301,6 +1328,6 @@ export async function token(db, serverDid, serverUrl, serverKid, privateKey, uns
     if (query.grant_type === "authorization_code") {
         return authorizationCodeToken(db, serverDid, serverUrl, serverKid, privateKey, query);
     }
-    return preAuthorizedCodeToken(serverUrl, serverKid, privateKey, query, credentialTypesSupported, timeout);
+    return preAuthorizedCodeToken(serverUrl, serverKid, privateKey, query, credentialTypesSupported, timeout, options);
 }
 //# sourceMappingURL=utils.js.map
\ No newline at end of file
diff --git a/dist/validators/create-authentication-request.validator.js b/dist/validators/create-authentication-request.validator.js
index 0e12cdc354af4bcdd5afeed947d6939ecbe0cbcd..9ca52ffa47ee27091a12988db47660a959f94e94 100644
--- a/dist/validators/create-authentication-request.validator.js
+++ b/dist/validators/create-authentication-request.validator.js
@@ -4,9 +4,7 @@ import { serviceWalletClientMetadataSchema } from "./service-wallet-client-metad
 export const createAuthenticationRequestSchema = (validScopes, credentialTypesSupported) => z.object({
     iss: z.string(),
     aud: z.string(),
-    scope: z.string().refine((scope) => validScopes.includes(scope), {
-        message: `Invalid scope. The valid scopes are: ${validScopes.join(", ")}`,
-    }),
+    scope: z.string(),
     response_type: z.literal("code"),
     client_id: z.string().url(),
     redirect_uri: z.string(),
diff --git a/src/AuthServer.ts b/src/AuthServer.ts
index 905ca29de966698d75bdf83cc1f29c522e94560c..a07814106631e3a3c785a8e2557a8bf2a211facb 100644
--- a/src/AuthServer.ts
+++ b/src/AuthServer.ts
@@ -252,7 +252,7 @@ export class AuthServer {
    * @param query - The POST /token request payload
    * @returns A token response.
    */
-  async token(query: unknown): Promise<TokenResponse> {
+  async token(query: unknown, token: any): Promise<TokenResponse> {
     if (!this.privateKey) {
       this.privateKey = await this.getPrivateKey();
     }
